diff --git a/public/client/TracyThread.hpp b/public/client/TracyThread.hpp
index 5638756a..7df6eaac 100644
--- a/public/client/TracyThread.hpp
+++ b/public/client/TracyThread.hpp
@@ -7,26 +7,14 @@
 #  include <pthread.h>
 #endif
 
-#ifdef TRACY_MANUAL_LIFETIME
-#  include "tracy_rpmalloc.hpp"
-#endif
-
 namespace tracy
 {
 
-#ifdef TRACY_MANUAL_LIFETIME
-extern thread_local bool RpThreadInitDone;
-#endif
-
 class ThreadExitHandler
 {
 public:
     ~ThreadExitHandler()
     {
-#ifdef TRACY_MANUAL_LIFETIME
-        rpmalloc_thread_finalize( 1 );
-        RpThreadInitDone = false;
-#endif
     }
 };
 
diff --git a/public/common/TracySocket.cpp b/public/common/TracySocket.cpp
index bdba3619..e0fa96f9 100644
--- a/public/common/TracySocket.cpp
+++ b/public/common/TracySocket.cpp
@@ -6,9 +6,7 @@
 #include <string.h>
 #include <sys/types.h>
 
-#include "TracyAlloc.hpp"
 #include "TracySocket.hpp"
-#include "TracySystem.hpp"
 
 #ifdef _WIN32
 #  ifndef NOMINMAX
@@ -73,7 +71,7 @@ void InitWinSock()
 enum { BufSize = 128 * 1024 };
 
 Socket::Socket()
-    : m_buf( (char*)tracy_malloc( BufSize ) )
+    : m_buf( (char*)malloc( BufSize ) )
     , m_bufPtr( nullptr )
     , m_sock( -1 )
     , m_bufLeft( 0 )
@@ -85,7 +83,7 @@ Socket::Socket()
 }
 
 Socket::Socket( int sock )
-    : m_buf( (char*)tracy_malloc( BufSize ) )
+    : m_buf( (char*)malloc( BufSize ) )
     , m_bufPtr( nullptr )
     , m_sock( sock )
     , m_bufLeft( 0 )
@@ -95,7 +93,7 @@ Socket::Socket( int sock )
 
 Socket::~Socket()
 {
-    tracy_free( m_buf );
+    free( m_buf );
     if( m_sock.load( std::memory_order_relaxed ) != -1 )
     {
         Close();
@@ -457,13 +455,7 @@ static int addrinfo_and_socket_for_family( uint16_t port, int ai_family, struct
     memset( &hints, 0, sizeof( hints ) );
     hints.ai_family = ai_family;
     hints.ai_socktype = SOCK_STREAM;
-#ifndef TRACY_ONLY_LOCALHOST
-    const char* onlyLocalhost = GetEnvVar( "TRACY_ONLY_LOCALHOST" );
-    if( !onlyLocalhost || onlyLocalhost[0] != '1' )
-    {
-        hints.ai_flags = AI_PASSIVE;
-    }
-#endif
+    // hints.ai_flags = AI_PASSIVE;  # todo localhost only
     char portbuf[32];
     sprintf( portbuf, "%" PRIu16, port );
     if( getaddrinfo( nullptr, portbuf, &hints, res ) != 0 ) return -1;
@@ -478,13 +470,7 @@ bool ListenSocket::Listen( uint16_t port, int backlog )
 
     struct addrinfo* res = nullptr;
 
-#if !defined TRACY_ONLY_IPV4 && !defined TRACY_ONLY_LOCALHOST
-    const char* onlyIPv4 = GetEnvVar( "TRACY_ONLY_IPV4" );
-    if( !onlyIPv4 || onlyIPv4[0] != '1' )
-    {
-        m_sock = addrinfo_and_socket_for_family( port, AF_INET6, &res );
-    }
-#endif
+    //m_sock = addrinfo_and_socket_for_family( port, AF_INET6, &res );  // todo
     if (m_sock == -1)
     {
         // IPV6 protocol may not be available/is disabled. Try to create a socket
@@ -529,9 +515,7 @@ Socket* ListenSocket::Accept()
         setsockopt( sock, SOL_SOCKET, SO_NOSIGPIPE, &val, sizeof( val ) );
 #endif
 
-        auto ptr = (Socket*)tracy_malloc( sizeof( Socket ) );
-        new(ptr) Socket( sock );
-        return ptr;
+        return new Socket(sock);
     }
     else
     {
